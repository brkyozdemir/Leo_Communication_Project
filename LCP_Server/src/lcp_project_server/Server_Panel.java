/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lcp_project_server;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author Berkay
 */
public class Server_Panel extends javax.swing.JFrame {
    
    ArrayList clientOutputStreams;
    public ArrayList<String> users;
    /**
     * Creates new form Server_Panel
     **/
    
    public ArrayList<String> getUserList(){
        return users;
    }
    
    public class ClientHandler implements Runnable{

        BufferedReader reader;
        Socket socket;
        PrintWriter client;
        
        public ClientHandler(Socket clientSocket,PrintWriter user){
            client = user;
            try {
                socket = clientSocket;
                InputStreamReader isReader = new InputStreamReader(socket.getInputStream());
                reader = new BufferedReader(isReader);
                
            } catch (Exception e) {
                server_area.append("Error...");
                System.err.println("Error...");
            }
        }
        
        @Override
        public void run() {
            String message;
            String[] data = null;
            
            try {
                while((message = reader.readLine()) != null){
                    server_area.append("Received: " + message + "\n");
                    data = message.split(":");
                    
                    for(String token : data){
                        server_area.append(token + "\n");
                    }
                    
                    if(data[2].equals("Connect")){
                        tellEveryone((data[0] + ":" + data[1] + ":" + "Chat"));
                        userAdd(data[0]);
                    }
                    else if(data[2].equals("Disconnect")){
                        tellEveryone((data[0] + ":has disconnected." + ":" + "Chat"));
                        removeUser(data[0]);
                    }
                    else if(data[2].equals("Chat")){
                        tellEveryone(message);
                    }
                    else{
                        server_area.append("\nNothing has happened");
                    }
                    
                }
            } catch (Exception e) {
                System.err.println("Connection lost");
                server_area.append("Connection lost\n");
                e.printStackTrace();
                clientOutputStreams.remove(client);
                removeUser(data[0]);
            }            
        }
        
    }
    
    public Server_Panel() {
        initComponents();
        initialized();
    }
    
    public  void initialized(){
        setResizable(false);
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - getHeight()) / 2);
        setLocation(x, y);
        server_area.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        server_area = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        btn_users = new javax.swing.JButton();
        btn_start = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        server_area.setColumns(20);
        server_area.setRows(5);
        jScrollPane2.setViewportView(server_area);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        btn_users.setText("Online Users");
        btn_users.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_usersActionPerformed(evt);
            }
        });

        btn_start.setText("START");
        btn_start.setMaximumSize(new java.awt.Dimension(53, 23));
        btn_start.setMinimumSize(new java.awt.Dimension(53, 23));
        btn_start.setPreferredSize(new java.awt.Dimension(53, 23));
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lcp_project_server/LeoLogo_omegas_bw100x108.gif"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_users, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_start, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(49, 49, 49))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btn_start, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(btn_users, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        getContentPane().add(jPanel4, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        Thread start = new Thread(new ServerStart());
        start.start();
        
        server_area.append("Server has been started...\n");
    }//GEN-LAST:event_btn_startActionPerformed

    private void btn_usersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_usersActionPerformed
        server_area.append("\nOnline Users : \n");
        for(String token : users){
            server_area.append(token + "\n");
        }
    }//GEN-LAST:event_btn_usersActionPerformed

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
        server_area.setText(null);
    }//GEN-LAST:event_jLabel1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server_Panel().setVisible(true);
            }
        });
    }
    
    public class ServerStart implements Runnable{

        @Override
        public void run() {
            
            clientOutputStreams = new ArrayList();
            users = new ArrayList();
            
            try {
                ServerSocket serverSock = new ServerSocket(1337);
                
                while(true){
                    Socket clientSock = serverSock.accept();
                    PrintWriter writer = new PrintWriter(clientSock.getOutputStream());
                    clientOutputStreams.add(writer);
                    
                    Thread listener = new Thread(new ClientHandler(clientSock,writer));
                    listener.start();
                    server_area.append("Connection established. \n");                    
                }
            } catch (Exception e) {
                System.err.println("Error cant make Connection");
                server_area.append("Error cant make Connection \n");
            }
        }
        
    }
    
    public void userAdd(String data){
        String message;
        String name = data;
        server_area.append("asd" + name + " has been added\n");
        users.add(name);
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);
        
        for(String token : tempList){
            message = (token + ": :Connect");
            tellEveryone(message);
        }
        tellEveryone("Server: :Done");
    }
    
    public void tellEveryone(String message){
        Iterator it = clientOutputStreams.iterator();
        
        while(it.hasNext()){
            try {
                PrintWriter writer = (PrintWriter)it.next();
                writer.println(message);
                server_area.append("Sending: " + message + "\n");
                writer.flush();
                server_area.setCaretPosition(server_area.getDocument().getLength());
                
            } catch (Exception e) {
                System.err.println("Cant send everyone");
                server_area.append("Cant send everyone\n");
            }
        }
    }
    
    public void removeUser(String data){
        String message;
        String name = data;
        users.remove(name);
        String[] tempList = new String[users.size()];
        users.toArray(tempList);
        
        for(String token : tempList){
            message = (token + ": :Connect");
            tellEveryone(message);
        }
        tellEveryone("Server: :Done");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_start;
    private javax.swing.JButton btn_users;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea server_area;
    // End of variables declaration//GEN-END:variables
}

